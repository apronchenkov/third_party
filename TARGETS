cc_library(
    name='gtest',
    srcs=[
        'googletest/googletest/src/gtest-all.cc',
        'googletest/googletest/src/gtest_main.cc',
    ],
    compiler_flags=[
        '-Isrc/github.com/apronchenkov/third_party/googletest/googletest',
        '-Wno-missing-field-initializers',
    ],
    transitive_compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/googletest/googletest/include',
    ], )

cc_library(
    name='rapidjson',
    transitive_compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/rapidjson/include',
    ], )

cc_library(
    name='eigen',
    transitive_compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/eigen-include',
    ], )

cc_library(
    name='http_parser',
    srcs=[
        'http-parser/http_parser.c',
    ],
    compiler_flags=[
        '-DNDEBUG',
        '-I src/github.com/apronchenkov/third_party/http-parser-include/http_parser',
        '-Wno-shadow=compatible-local',
    ],
    transitive_compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/http-parser-include',
        '-DHTTP_MAX_HEADER_SIZE=4096',
    ], )

cc_library(
    name='uthash',
    transitive_compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/uthash-include',
    ], )

cc_library(
    name='fmt',
    srcs=[
        'fmt/src/format.cc',
        'fmt/src/posix.cc',
    ],
    transitive_compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/fmt/include',
    ],
    compiler_flags=[
        '-DNDEBUG=1',
        '-Wall',
        '-Wextra',
        '-Wpedantic',
        '-Wno-weak-vtables',
        '-Wno-padded',
        '-Wno-gnu-statement-expression',
        '-Wno-c++98-compat',
        '-Wno-c++98-compat-pedantic',
        '-Wno-reserved-id-macro',
        '-Wno-global-constructors',
        '-Wno-disabled-macro-expansion',
        '-Wno-switch-enum',
        '-Wno-documentation-unknown-command',
        '-Wno-gnu-string-literal-operator-template',
        '-Wno-unused-member-function',
        '-Wno-format-nonliteral',
        '-Wno-missing-noreturn',
        '-Wno-undefined-func-template',
        '-Wno-shadow',
        '-Wno-sign-conversion',
        '-Wno-used-but-marked-unused',
        '-Wno-covered-switch-default',
        '-Wno-missing-variable-declarations',
        '-Wno-double-promotion',
        '-Wno-zero-as-null-pointer-constant',
        '-Wno-gnu-string-literal-operator-template',
    ], )

cc_library(
    name='double_conversion',
    srcs=[
        'double-conversion/double-conversion/bignum.cc',
        'double-conversion/double-conversion/bignum-dtoa.cc',
        'double-conversion/double-conversion/cached-powers.cc',
        'double-conversion/double-conversion/diy-fp.cc',
        'double-conversion/double-conversion/double-conversion.cc',
        'double-conversion/double-conversion/fast-dtoa.cc',
        'double-conversion/double-conversion/fixed-dtoa.cc',
        'double-conversion/double-conversion/strtod.cc',
    ],
    transitive_compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/double-conversion-include',
    ],
    compiler_flags=[
        '-Wall',
        '-Werror',
        '-O3',
        '-DNDEBUG',
    ],
)

SQLITE_COMPILER_FLAGS = [
    '-O3',
    '-Wno-unused-parameter',
    '-Wno-overlength-strings',
    '-Wno-implicit-fallthrough',
    '-Wno-empty-body',
    '-DNDEBUG=1',
    # Recommended Compile-time Options (https://www.sqlite.org/compile.html)
    '-DSQLITE_THREADSAFE=0',
    '-DSQLITE_DEFAULT_MEMSTATUS=0',
    '-DSQLITE_DEFAULT_WAL_SYNCHRONOUS=1',
    '-DSQLITE_LIKE_DOESNT_MATCH_BLOBS',
    '-DSQLITE_MAX_EXPR_DEPTH=0',
    '-DSQLITE_OMIT_DECLTYPE',
    '-DSQLITE_OMIT_DEPRECATED',
    '-DSQLITE_OMIT_PROGRESS_CALLBACK',
    '-DSQLITE_OMIT_SHARED_CACHE',
    '-DSQLITE_USE_ALLOCA',
    # Platform Configuration
    '-DHAVE_FDATASYNC=1',
    '-DHAVE_GMTIME_R=1',
    '-DHAVE_ISNAN=1',
    '-DHAVE_LOCALTIME_R=1',
    '-DHAVE_READLINE=1',
    '-DUSLEEP=1',
]

cc_library(
    name='sqlite',
    srcs=[
        'sqlite-amalgamation/sqlite3.c',
    ],
    transitive_compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/sqlite-include',
    ],
    compiler_flags=SQLITE_COMPILER_FLAGS, )

# cc_binary(
#     name='sqlite_shell',
#     srcs=[
#         'sqlite-amalgamation/shell.c',
#     ],
#     deps=[
#         ':sqlite',
#     ],
#     compiler_flags=SQLITE_COMPILER_FLAGS,
#     linker_flags=[
#         '-lreadline',
#     ], )

# crypto/ssl
import os
if os.uname().sysname == 'Darwin':
    cc_library(
        name='crypto',
        transitive_compiler_flags=[
            '-I /usr/local/opt/openssl/include',
        ],
        linker_flags=[
            '-L/usr/local/opt/openssl/lib',
            '-lcrypto',
        ], )
    cc_library(
        name='ssl',
        transitive_compiler_flags=[
            '-I /usr/local/opt/openssl/include',
        ],
        linker_flags=[
            '-L/usr/local/opt/openssl/lib',
            '-lssl',
        ],
        deps=[
            ':crypto',
        ], )
else:
    cc_library(
        name='crypto',
        linker_flags=[
            '-lcrypto',
        ], )
    cc_library(
        name='ssl',
        linker_flags=[
            '-lssl',
        ],
        deps=[
            ':crypto',
        ], )

cc_library(
    name='asio',
    srcs=[
        'asio/asio/src/asio.cpp',
        'asio/asio/src/asio_ssl.cpp',
    ],
    transitive_compiler_flags=[
        '-DASIO_STANDALONE',
        '-DASIO_SEPARATE_COMPILATION',
        '-I src/github.com/apronchenkov/third_party/asio/asio/include',
    ],
    deps=[
        ':ssl',
    ], )

cc_library(
    name='gsl',
    transitive_compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/GSL/include',
    ], )


if os.uname().sysname == 'Darwin':
    lua_core_transitive_compiler_flags = [
        '-DLUA_USE_MACOSX',
    ]
    lua_bin_linker_flag = [
        '-lreadline',
    ]
else:
    lua_core_transitive_compiler_flags = [
        '-DLUA_USE_LINUX',
    ]
    lua_bin_linker_flag = [
        '-lreadline',
    ]

cc_library(
    name='lua_core',
    srcs=[
        # core
        'lua-5.3.5/lapi.c',
        'lua-5.3.5/lcode.c',
        'lua-5.3.5/lctype.c',
        'lua-5.3.5/ldebug.c',
        'lua-5.3.5/ldo.c',
        'lua-5.3.5/ldump.c',
        'lua-5.3.5/lfunc.c',
        'lua-5.3.5/lgc.c',
        'lua-5.3.5/llex.c',
        'lua-5.3.5/lmem.c',
        'lua-5.3.5/lobject.c',
        'lua-5.3.5/lopcodes.c',
        'lua-5.3.5/lparser.c',
        'lua-5.3.5/lstate.c',
        'lua-5.3.5/lstring.c',
        'lua-5.3.5/ltable.c',
        'lua-5.3.5/ltm.c',
        'lua-5.3.5/lundump.c',
        'lua-5.3.5/lvm.c',
        'lua-5.3.5/lzio.c',
        #'lua-5.3.5/ltests.c',
        # aux
        'lua-5.3.5/lauxlib.c',
        # lib
        'lua-5.3.5/lbaselib.c',
        'lua-5.3.5/ldblib.c',
        'lua-5.3.5/liolib.c',
        'lua-5.3.5/lmathlib.c',
        'lua-5.3.5/loslib.c',
        'lua-5.3.5/ltablib.c',
        'lua-5.3.5/lstrlib.c',
        'lua-5.3.5/lutf8lib.c',
        'lua-5.3.5/lbitlib.c',
        'lua-5.3.5/loadlib.c',
        'lua-5.3.5/lcorolib.c',
        'lua-5.3.5/linit.c',
    ],
    compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/lua-5.3.5',
    ],
    transitive_compiler_flags=lua_core_transitive_compiler_flags, )

cc_binary(
    name='lua_bin',
    srcs=[
        'lua-5.3.5/lua.c',
    ],
    deps=[
        ':lua_core',
    ],
    compiler_flags=[
        '-I src/github.com/apronchenkov/third_party/lua-5.3.5',
    ],
    linker_flags=lua_bin_linker_flag, )
